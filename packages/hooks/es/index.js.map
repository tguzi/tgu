{"version":3,"file":"index.js","sources":["../lib/useUpdateEffect/index.ts","../lib/useStorage/utils.ts","../lib/useStorage/useStorageState.ts","../lib/useStorage/altStorageState.ts","../lib/useStorage/useCacheStorage.ts","../lib/useStorage/useSessionStorageState.ts","../lib/useStorage/useLocalstorageState.ts","../lib/index.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n// 依赖更新时才执行 - 去初始化\nconst useUpdateEffect: typeof useEffect = (effect, deps) => {\n  const isMounted = useRef(false)\n  useEffect(() => {\n    if (!isMounted.current) {\n      isMounted.current = true\n    } else {\n      return effect()\n    }\n  }, deps)\n}\n\nexport default useUpdateEffect\n","export function isFunction<T>(obj: any): obj is T {\n  return typeof obj === 'function'\n}","import { useState } from 'react'\nimport useUpdateEffect from '../useUpdateEffect'\nimport { isFunction } from './utils'\n\nimport {\n  IFuncUpdater,\n  TStorageStateDefaultValue,\n  TStorageStateResult\n} from './types'\n\nfunction useStorageState<T>(storage: Storage, key: string, defaultValue?: TStorageStateDefaultValue<T>): TStorageStateResult<T> {\n\n  const [state, setState] = useState<T | undefined>(() => getStoredValue())\n\n  function getStoredValue() {\n    const raw = storage.getItem(key)\n    if (raw) {\n      try {\n        return JSON.parse(raw)\n      } catch (e) { }\n    }\n    if (isFunction<IFuncUpdater<T>>(defaultValue)) {\n      return defaultValue()\n    }\n    return defaultValue\n  }\n\n  function updateState(value?: T | IFuncUpdater<T>) {\n    if (isFunction<IFuncUpdater<T>>(value)) {\n      const previousState = getStoredValue()\n      const currentState = value(previousState)\n      storage.setItem(key, JSON.stringify(currentState))\n      setState(currentState)\n    } else {\n      storage.setItem(key, JSON.stringify(value))\n      setState(value)\n    }\n  }\n\n  function deleteState() {\n    setState(undefined)\n    storage.removeItem(key)\n  }\n\n  useUpdateEffect(() => {\n    setState(getStoredValue())\n  }, [key])\n  return [state, updateState, deleteState]\n}\n\nexport default useStorageState\n","import { isFunction } from './utils'\n\nimport {\n  IFuncUpdater,\n  TStorageStateDefaultValue,\n  TStorageStateResult\n} from './types'\n\nfunction altStorageState<T>(storage: Storage, key: string, defaultValue?: TStorageStateDefaultValue<T>): TStorageStateResult<T> {\n\n  function getStoredValue() {\n    const raw = storage.getItem(key)\n    if (raw) {\n      try {\n        return JSON.parse(raw)\n      } catch (e) { }\n    }\n    if (isFunction<IFuncUpdater<T>>(defaultValue)) {\n      return defaultValue()\n    }\n    return defaultValue\n  }\n\n  function updateState(value?: T | IFuncUpdater<T>) {\n    if (isFunction<IFuncUpdater<T>>(value)) {\n      const previousState = getStoredValue()\n      const currentState = value(previousState)\n      storage.setItem(key, JSON.stringify(currentState))\n    } else {\n      storage.setItem(key, JSON.stringify(value))\n    }\n  }\n\n  function deleteState() {\n    storage.removeItem(key)\n  }\n\n  const state = getStoredValue()\n\n  return [state, updateState, deleteState]\n}\n\nexport default altStorageState\n","import useStorageState from './useStorageState'\nimport altStorageState from './altStorageState'\n\nclass mapStorage {\n  private storage = new Map()\n\n  length = 0\n\n  getItem(key: string) {\n    return this.storage.has(key) && this.storage.get(key)\n  }\n\n  setItem(key: string, value: any) {\n    this.storage.set(key, value)\n    this.updateLength()\n  }\n\n  removeItem(key: string) {\n    this.storage.delete(key)\n    this.updateLength()\n  }\n\n  clear() {\n    this.storage.clear()\n    this.updateLength()\n  }\n\n  updateLength() {\n    this.length = this.storage.size\n  }\n\n  key(index: number) {\n    const keys = this.storage.keys()\n    let key: string | null = null\n    if (index > this.storage.size) {\n      return key\n    }\n    for (let i = 0; i < this.storage.size; i++) {\n      const result = keys.next()\n      if (i === index) {\n        key = result.value\n        break\n      }\n    }\n    return key\n  }\n\n}\n\nconst cache = new mapStorage()\n\n// hooks场景\nexport function usecacheStorageState<T>(key: string, defaultValue?: T | (() => T)) {\n  return useStorageState(cache, key, defaultValue)\n}\n\n// 非hooks场景\nexport function altCacheStorageState<T>(key: string, defaultValue?: T | (() => T)) {\n  return altStorageState(cache, key, defaultValue)\n}\n","import useStorageState from './useStorageState'\nimport altStorageState from './altStorageState'\n\n// hooks场景\nexport function useSessionStorageState<T>(key: string, defaultValue?: T | (() => T)) {\n  return useStorageState(sessionStorage, key, defaultValue)\n}\n\n// 非hooks场景\nexport function altSessionStorageState<T>(key: string, defaultValue?: T | (() => T)) {\n  return altStorageState(sessionStorage, key, defaultValue)\n}\n","import useStorageState from './useStorageState'\nimport altStorageState from './altStorageState'\n\n// hooks场景\nexport function useLocalStorageState<T>(key: string, defaultValue?: T | (() => T)) {\n  return useStorageState(localStorage, key, defaultValue)\n}\n\n// 非hooks场景\nexport function altLocalStorageState<T>(key: string, defaultValue?: T | (() => T)) {\n  return altStorageState(localStorage, key, defaultValue)\n}\n","export * as useStorage from './useStorage/index'\nexport { default as useUpdateEffect } from './useUpdateEffect/index'\n\nexport const testFn = () => {\n  console.log('我是一个测试的hooks')\n}"],"names":["useUpdateEffect","effect","deps","isMounted","useRef","useEffect","current","isFunction","obj","useStorageState","storage","key","defaultValue","_a","state","setState","getStoredValue","raw","getItem","JSON","parse","e","value","currentState","setItem","stringify","undefined","removeItem","altStorageState","cache","this","Map","mapStorage","has","get","set","updateLength","delete","clear","length","size","index","keys","i","result","next","sessionStorage","localStorage","testFn","console","log"],"mappings":"4DAGA,IAAMA,EAAoC,SAACC,EAAQC,GACjD,IAAMC,EAAYC,GAAO,GACzBC,GAAU,WACR,GAAKF,EAAUG,QAGb,OAAOL,IAFPE,EAAUG,SAAU,IAIrBJ,aCXWK,EAAcC,GAC5B,MAAsB,mBAARA,ECShB,SAASC,EAAmBC,EAAkBC,EAAaC,GAEnD,IAAAC,8BAACC,OAAOC,OAEd,SAASC,IACP,IAAMC,EAAMP,EAAQQ,QAAQP,GAC5B,GAAIM,EACF,IACE,OAAOE,KAAKC,MAAMH,GAClB,MAAOI,IAEX,OAAId,EAA4BK,GACvBA,IAEFA,EAuBT,OAHAZ,GAAgB,WACde,EAASC,OACR,CAACL,IACG,CAACG,EApBR,SAAqBQ,GACnB,GAAIf,EAA4Be,GAAQ,CACtC,IACMC,EAAeD,EADCN,KAEtBN,EAAQc,QAAQb,EAAKQ,KAAKM,UAAUF,IACpCR,EAASQ,QAETb,EAAQc,QAAQb,EAAKQ,KAAKM,UAAUH,IACpCP,EAASO,IAIb,WACEP,OAASW,GACThB,EAAQiB,WAAWhB,KCjCvB,SAASiB,EAAmBlB,EAAkBC,EAAaC,GAEzD,SAASI,IACP,IAAMC,EAAMP,EAAQQ,QAAQP,GAC5B,GAAIM,EACF,IACE,OAAOE,KAAKC,MAAMH,GAClB,MAAOI,IAEX,OAAId,EAA4BK,GACvBA,IAEFA,EAmBT,MAAO,CAFOI,IAdd,SAAqBM,GACnB,GAAIf,EAA4Be,GAAQ,CACtC,IACMC,EAAeD,EADCN,KAEtBN,EAAQc,QAAQb,EAAKQ,KAAKM,UAAUF,SAEpCb,EAAQc,QAAQb,EAAKQ,KAAKM,UAAUH,KAIxC,WACEZ,EAAQiB,WAAWhB,KC/BvB,IA8CMkB,EAAQ,eA9Cd,aACUC,aAAU,IAAIC,IAEtBD,YAAS,EAyCX,OAvCEE,oBAAA,SAAQrB,GACN,OAAOmB,KAAKpB,QAAQuB,IAAItB,IAAQmB,KAAKpB,QAAQwB,IAAIvB,IAGnDqB,oBAAA,SAAQrB,EAAaW,GACnBQ,KAAKpB,QAAQyB,IAAIxB,EAAKW,GACtBQ,KAAKM,gBAGPJ,uBAAA,SAAWrB,GACTmB,KAAKpB,QAAQ2B,OAAO1B,GACpBmB,KAAKM,gBAGPJ,kBAAA,WACEF,KAAKpB,QAAQ4B,QACbR,KAAKM,gBAGPJ,yBAAA,WACEF,KAAKS,OAAST,KAAKpB,QAAQ8B,MAG7BR,gBAAA,SAAIS,GACF,IAAMC,EAAOZ,KAAKpB,QAAQgC,OACtB/B,EAAqB,KACzB,GAAI8B,EAAQX,KAAKpB,QAAQ8B,KACvB,OAAO7B,EAET,IAAK,IAAIgC,EAAI,EAAGA,EAAIb,KAAKpB,QAAQ8B,KAAMG,IAAK,CAC1C,IAAMC,EAASF,EAAKG,OACpB,GAAIF,IAAMF,EAAO,CACf9B,EAAMiC,EAAOtB,MACb,OAGJ,OAAOX,2EAQ6BA,EAAaC,GACnD,OAAOH,EAAgBoB,EAAOlB,EAAKC,kCAIGD,EAAaC,GACnD,OAAOgB,EAAgBC,EAAOlB,EAAKC,oCCtDKD,EAAaC,GACrD,OAAOH,EAAgBqC,eAAgBnC,EAAKC,oCAIJD,EAAaC,GACrD,OAAOgB,EAAgBkB,eAAgBnC,EAAKC,kCCNND,EAAaC,GACnD,OAAOH,EAAgBsC,aAAcpC,EAAKC,kCAIJD,EAAaC,GACnD,OAAOgB,EAAgBmB,aAAcpC,EAAKC,MCP/BoC,EAAS,WACpBC,QAAQC,IAAI"}